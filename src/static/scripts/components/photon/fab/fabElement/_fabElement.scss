@use "../../../../../style/vars";
@use "../fab";
@use 'sass:math';

@keyframes popInFabElement {
	from {
		filter: opacity(0) blur(5px);
	}

	to {
		filter: opacity(1) blur(0);
	}
}

.fabElement {
	--img: "";
	--x: 0;
	--y: 0;

	position: absolute;
	bottom: 0;
	left: 0;
	width: 3rem;
	height: 3rem;
	display: flex;
	transition: all .25s ease;

	.icon {
		margin-left: auto;
		background-color: vars.$background-el1;
		background-image: var(--img);
		background-size: contain;
		background-origin: content-box;
		background-repeat: no-repeat;
		padding: .5rem;
		width: 3rem;
		height: 3rem;
		border-radius: 50%;
		border: 1px solid vars.$border-color;
		will-change: transform;
		opacity: 0;
		transition: all .25s ease, padding .1s ease, border .1s ease;
		animation: popInFabElement 0.2s ease forwards;
		@extend %shadow-diffuse;

		&.clickable {
			cursor: pointer;

			&:hover {
				background-color: vars.$background-el2;
			}

			&:active {
				padding: .4rem;
			}
		}
	}

	&.small {
		width: 2rem;
		height: 2rem;

		.icon {
			width: 2rem;
			height: 2rem;
			padding: .25rem;

			&:active {
				padding: .15rem;
			}
		}
	}

	&.editPaneOpen {
		.subFab {
			transition-delay: 0.4s;
		}
	}

	.subFab {
		background: vars.$background-el2;
		border: 1px solid vars.$border-color;
		width: 2rem;
		height: 2rem;
		position: absolute;
		z-index: 1;
		border-radius: 50%;
		transition: all .25s ease;
		transition-delay: 0.1s;
		opacity: 0;
		visibility: hidden;
		margin: 0.5rem;
		transform: scale(0.25);
		@extend %shadow-diffuse;

		img {
			width: 2rem;
			height: 2rem;
			padding: .25rem;
			margin: -1px 0 0 -1px;

			&:active {
				padding: .15rem;
			}
		}
	}
}

.floatingActionButton {
	&.show:not(.remove) {
		.fabElement {
			margin-left: calc(0.25rem + var(--x));
			margin-bottom: calc(0.25rem + var(--y));

			.icon {
				opacity: 1;
			}
		}
	}

	&:not(.editing) {
		.fabElement.editingOnlyVisible {
			margin-left: 1rem;
			margin-bottom: 1rem;
		}
	}

	&.editing:not(.isDragging) .fabElement:hover, &.editing.isDragging .fabElement.draggable {
		$subFabDistance: 2.75rem;

		.subFab {
			opacity: 1;
			visibility: visible;
			transition-delay: 0s;

			&:nth-of-type(1) {
				$angle: 60 * math.div(math.$pi, 180);
				transform: translateX(math.cos($angle) * $subFabDistance) translateY(math.sin($angle) * $subFabDistance) scale(1);
			}

			&:nth-of-type(2) {
				$angle: 180 * math.div(math.$pi, 180);
				transform: translateX(math.cos($angle) * $subFabDistance) translateY(math.sin($angle) * $subFabDistance) scale(1);
			}

			&:nth-of-type(3) {
				$angle: 300 * math.div(math.$pi, 180);
				transform: translateX(math.cos($angle) * $subFabDistance) translateY(math.sin($angle) * $subFabDistance) scale(1);
			}
		}
	}

	&.isDragging {
		.fabElement {
			transition: all .25s ease, margin 0s;

			&:not(.draggable, .small) {
				.icon {
					border-width: 2px;
				}
			}

			&.draggable {
				z-index: 3;
				pointer-events: none;
				.icon {
					@extend %shadow-4;
				}
			}

			&.dragTarget {
				.icon {
					border-width: 5px;
					filter: brightness(3);
					@extend %shadow-6;
				}
			}
		}
	}
}